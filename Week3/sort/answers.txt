sort1 uses: bubble sort

How do you know?: amongst the 3 sort binary files, `sort1` is the slowest one to solve the biggest unsorted data (ie: `./sort1 random50000.txt` took 7.80s). Another hint for me was that execution time was really good when data was already sorted, which was mentioned during class as being typical of bubble sort.

time ./sort1 random5000.txt         real    0m0.079s
time ./sort1 random10000.txt        real    0m0.338s
time ./sort1 random50000.txt        real    0m7.808s

time ./sort1 sorted5000.txt         real    0m0.044s
time ./sort1 sorted10000.txt        real    0m0.134s
time ./sort1 sorted50000.txt        real    0m0.642s

sort2 uses: merge sort

How do you know?: This one had to be `merge sort` because the execution time remained of the same order, notwithstanding the sorted/unsorted data sets.

time ./sort2 random5000.txt         real    0m0.025s
time ./sort2 random10000.txt        real    0m0.064s
time ./sort2 random50000.txt        real    0m0.649s

time ./sort2 sorted5000.txt         real    0m0.049s
time ./sort2 sorted10000.txt        real    0m0.141s
time ./sort2 sorted50000.txt        real    0m0.708s

sort3 uses: selection sort

How do you know?: This one by deduction had to be the `selection sort`.  However, just to confirm this a bit more, by looking at its execution times and comparing it to those of `sort1` and `sort3`, `sort3` is faster than `sort1`, but slower than `sort2`. As seen in the sort animations during class, it is a given that `selection sort` is slower than `merge sort`, but faster than `bubble sort`.  Hence, sort3 could only be `selection sort`.

time ./sort3 random5000.txt         real    0m0.076s
time ./sort3 random10000.txt        real    0m0.163s
time ./sort3 random50000.txt        real    0m3.308s

time ./sort3 sorted5000.txt         real    0m0.051s
time ./sort3 sorted10000.txt        real    0m0.180s
time ./sort3 sorted50000.txt        real    0m3.212s
